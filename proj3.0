#include <stdio.h>
#include <iostream>
#include <string>
using namespace std;

struct cad_prod {
    int id_prod;
    char nome[15];
    float watts;
};

struct cal {
    float tempo;
    float dias;
    float kwh;
};

// Função para preencher vetor a partir do arquivo
void preencheVetor(cad_prod *v, int n) {
    FILE *arqprod;
    arqprod = fopen("arqprod.txt", "r");

    if (arqprod == NULL) {
        printf("Problemas com o arquivo de entrada de dados\n");
        exit(1);
    }

    for (int i = 0; i < n; i++) {
        if (fscanf(arqprod, "%d %14s %f", &v[i].id_prod, v[i].nome, &v[i].watts) != 3) {
            printf("Erro ao ler os dados do arquivo\n");
            fclose(arqprod);
            exit(1);
        }
    }

    fclose(arqprod);
}

// Função para exibir os produtos formatados
void exibirProdutos(cad_prod *v, int n) {
    printf("%-10s %-20s %-10s\n", "ID", "Nome", "Watts");
    printf("-------------------------------------------\n");
    for (int i = 0; i < n; i++) {
        printf("%-10d %-20s %-10.2f\n", v[i].id_prod, v[i].nome, v[i].watts);
    }
}

int main() {
    int x = 0;
    int contador = 0;
    cad_prod produtos[10];
    cal tempos[10];

    while (x != 5) {
        cout << "Menu:\n";
        cout << "1- Cadastrar produto\n";
        cout << "2- Ver produtos\n";
        cout << "3- Ler do arquivo\n";
        cout << "5- Sair\n";
        cin >> x;

        if (x == 1) {
            if (contador < 10) {
                cout << "ID do produto: ";
                cin >> produtos[contador].id_prod;
                cin.ignore(); // Evita problemas ao ler strings após números
                cout << "Nome do produto: ";
                cin >> produtos[contador].nome;
                cout << "Watts do produto: ";
                cin >> produtos[contador].watts;
                cout << "Tempo de uso por dia (horas): ";
                cin >> tempos[contador].tempo;
                cout << "Dias usando o produto: ";
                cin >> tempos[contador].dias;

                // Cálculo do consumo
                tempos[contador].kwh = (produtos[contador].watts * tempos[contador].tempo * tempos[contador].dias) / 1000.0;

                cout << "\nProduto cadastrado com sucesso!\n";
                contador++;
            } else {
                cout << "Limite de produtos cadastrados atingido!\n";
            }
        }

        if (x == 2) {
            if (contador == 0) {
                cout << "Nenhum produto cadastrado.\n";
            } else {
                cout << "Produtos cadastrados:\n";
                for (int i = 0; i < contador; i++) {
                    cout << "ID: " << produtos[i].id_prod << "\n";
                    cout << "Nome: " << produtos[i].nome << "\n";
                    cout << "Watts: " << produtos[i].watts << " W\n";
                    cout << "Tempo de uso por dia: " << tempos[i].tempo << " horas\n";
                    cout << "Dias: " << tempos[i].dias << " dias\n";
                    cout << "Consumo: " << tempos[i].kwh << " kWh\n";
                }
            }
        }
        #define MAX_PRODUTOS 100
 cad_prod produtos[MAX_PRODUTOS];
 
    int numProdutos;

    printf("Digite o numero de produtos a serem lidos: ");
    if (scanf("%d", &numProdutos) != 1 || numProdutos > MAX_PRODUTOS || numProdutos <= 0) {
        printf("Número invalido de produtos!\n");
        return 1;
    }

    preencheVetor(produtos, numProdutos);
    exibirProdutos(produtos, numProdutos);
        if (x == 3) {
            // Chama a função para preencher os produtos a partir do arquivo
            preencheVetor(produtos, 10);
            cout << "Dados carregados do arquivo!\n";
        }
    }

    return 0;
}
